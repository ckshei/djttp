exit
spotify_playlist.add_tracks!(add_songs)
      spotify_playlist = RSpotify::Playlist.find(playlist.spotify_host_id, playlist.spotify_playlist_id)
add_songs
exit
add_songs
exit
user
exit
redirect_to sync_url
sync_url = session[:sync_url]
redirect_to sync_url
session[:sync_url]
exit
add_songs << spotify_track
add_songs
exit
add_songs
user.top_tracks(limit: 7, time_range: 'short_term').any?
user.top_tracks(limit: 7, time_range: 'short_term')
add_songs.any?
add_songs
exit
playlist = Playlist.new
playlist = Playlist.create
playlist = PLaylist.create
playlist
playlist.update(event_id: self.id)
    )
      spotify_url: spotify_playlist.external_urls["spotify"]
      spotify_playlist_id: spotify_playlist.id,
      spotify_host_id: self.host.uid,
      event_id: self.id,
    playlist.update(
    )
      spotify_url: spotify_playlist.external_urls["spotify"]
      spotify_playlist_id: spotify_playlist.id,
      spotify_host_id: self.host.uid,
      event_id: self.id,
    playlist.update(
self.id
self.host.uid
spotify_playlist.id
spotify_playlist.external_urls['spotify']
exit
user.top_tracks(limit: 5)
exit
user.top_tracks(limit: 5)
exit
eixt
exit
ENV['SPOTIFY_KEY']
ENV['SPOTIFY_ID']
exit
ENV['SPOTIFY_KEY']
ENV['SPOTIFY_ID']
exit
ENV['SPOTIFY_KEY']
ENV['SPOTIFY_ID']
exit
session["rsvp"]
session
exit
redirect_to "/auth/spotify" unless session.include? :user_id
redirect_to "/auth/spotify" unless session.include? user_id
exit
redirect_to "/auth/spotify"
session.include? :user_id
exit
 spotify_playlist = user.create_playlist!("#{self.name}-playlist")
exit
user
spotify_playlist = user.create_playlist!("#{self.name}-playlist")
self.name
user
exit
spotify_playlist = RSpotify::Playlist.find(user.uid, playlist.spotify_playlist_id)
exit
RSpotify::Playlist.find(user.uid, playlist.spotify_playlist_id)
playlist.spotify_playlist_id
user.uid
exit
playlist.host_id
playlist.host
playlist.host_id.to_s
playlist.spotify_playlist_id
playlist.host_id.to_s
playlist.host_id
exit
@event.playlist.host_id
@event.create_playlist
@event = Event.create(event_params(:name, :date, :host_id))
exit
@event.host_id
@event
@event.playlist
@event.playlist.host_id
@event.playlist.host.id
@event.host.id
@event.host
@event.playlist
@event.create_playlist
event
@event = Event.create(event_params(:name, :date, :host_id))
event_params(:name, :date, :host_id)
event_params
exit
playlist
playlist.host_id.to_s
playlist.host_id
user
exit
add_songs << spotify_track
add_songs
exit
@event.playlist.add_songs
@event.playlist
@event.host == current_user
@event
exit
add_songs.empty?
add_songs.empty?!
add_songs.empty?
!add_songs.empty?
!add_songs
add_songs!
add_songs
exit
user.top_tracks(limit:5).class
user.top_tracks(limit:5)
exit
Rails.application.routes.url_helpers.rsvp_event_url(self, host: "localhost:3000")
Rails.application.routes.url_helpers.rsvp_event_url(self, host: "localhost:3000"
Rails.application.routes.url_helpers.rsvp_event_url(self, host: "localhost:3000:)
Rails.application.routes.url_helpers.rsvp_event_url(self, :only_path => true)
Rails.application.routes.url_helpers.rsvp_event_url([self, :only_path => true])
Rails.application.routes.url_helpers.rsvp_event_url([self, :only_path => true)
Rails.application.routes.url_helpers.rsvp_event_url([self, host:'localhost:3000'])
Rails.application.routes.url_helpers.rsvp_event_url([self, :host=>'localhost:3000'])
Rails.application.routes.url_helpers.rsvp_event_url([self, :host=>localhost:3000])
Rails.application.routes.url_helpers.rsvp_event_url(self)
Rails.application.routes.url_helpers.rsvp_event(self)
Rails.application.routes.url_helpers.event_path(self)
Rails.application.routes.url_helpers.event_path(self, action: rsvp)
Rails.application.routes.url_helpers.events_path
Rails.application.routes.events_path
Rails.application.routes.events_path(self)
Rails.application.routes.events_path(self, action:rsvp)
    byebug
exit
request_uri
root_url
Rails.application.routes.url_helpers(playlist)
Rails.application.routes.url_helpers(@playlist)
Rails.application.routes.url_helpers
request
request.host
